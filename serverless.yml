# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    v1.docs.serverless.com
#
# Happy Coding!

service: cmiserverless

provider:
  name: aws
  runtime: nodejs4.3

# you can overwrite defaults here
#defaults:
#  stage: dev
#  region: us-east-1

# you can add packaging information here
package:
#  include:
#    - include-me.js
  exclude:
    - test.js
    - test-event-bootstrap.json
    - test-event-create-folder.json
    - test-event-get-children.json
    - test-event-get-object.json
    - test-event-repository.json
    - CMIServerless.iml
    - postman-collection.json
    - LICENSE
    - README.md
    - node_modules/aws-sdk
    - node_modules/dynamodb-doc
    - .idea
#  artifact: my-service-code.zip

functions:
  bootstrap:
    handler: cmis-bootstrap-service.handler
    events:
      - http:
          path: bootstrap
          method: post
          request:
            template:
              application/json: '#set( $host = ".execute-api.us-east-1.amazonaws.com" )
                                {
                                  "repositoryId": "default",
                                  "baseUrl": "https://$context.apiId$host/$context.stage"
                                }'
  repositories:
    handler: cmis-repositories-service.handler
    # TODO: uncomment when https://github.com/serverless/serverless/issues/1738 is fixed
#    events:
#      - http:
#          path: '/'
#          method: get
  repository:
    handler: cmis-repository-service.handler
    events:
      - http:
          path: '{repoId}'
          method: get
          request:
            template:
              application/json: '#set( $repoId = "repoId" )
                                 #set( $cmisselector = "cmisselector" )
                                 #set( $typeId = "typeId" )
                                 {
                                    "repoId": "$input.params($repoId)",
                                    "cmisselector": "$input.params($cmisselector)",
                                    "typeId": "$input.params($typeId)"
                                 }'
  objects:
    handler: cmis-object-service.handler
    events:
      - http:
          path: '{repoId}/object'
          method: get
          request:
            template:
              application/json: '#set( $repoId = "repoId" )
                                 #set( $cmisselector = "cmisselector" )
                                 #set( $objectId = "objectId" )
                                 #set( $succinct = "succinct" )
                                 #set( $includeAllowableActions = "includeAllowableActions" )
                                 {
                                   "repoId": "$input.params($repoId)",
                                   "cmisselector": "$input.params($cmisselector)",
                                   "objectId": "$input.params($objectId)"
                                   #if($input.params($succinct) != ""),"succinct": $input.params($succinct)#end
                                   #if($input.params($includeAllowableActions) != ""),"includeAllowableActions": $input.params($includeAllowableActions)#end
                                 }'
      - http:
          path: '{repoId}/object'
          method: post
          request:
            template:
              application/x-www-form-urlencoded: '#set( $repoId = "repoId" )
                                                  #set( $objectId = "objectId" )

                                                  {
                                                    #foreach( $token in $input.path("$").split("&") )
                                                      #set( $keyVal = $token.split("=") )
                                                      #set( $keyValSize = $keyVal.size() )
                                                      #if( $keyValSize >= 1 )
                                                        #set( $key = $util.urlDecode($keyVal[0]) )
                                                        #if( $keyValSize >= 2 )
                                                          #set( $val = $util.urlDecode($keyVal[1]) )
                                                        #else
                                                          #set( $val = "" )
                                                        #end
                                                        "$key": "$val"#if($foreach.hasNext),#end
                                                      #end
                                                    #end
                                                    ,
                                                    "repoId": "$input.params($repoId)",
                                                    "objectId": "$input.params($objectId)"
                                                  }'

resources:
  Resources:
    RepositoriesDynamoDbTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: CMISRepositories
        AttributeDefinitions:
          - AttributeName: repositoryId
            AttributeType: S
        KeySchema:
          - AttributeName: repositoryId
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5
    RepositoriesDynamoDBIamPolicy:
      Type: AWS::IAM::Policy
      DependsOn: RepositoriesDynamoDbTable
      Properties:
        PolicyName: lambda-dynamodb-repositories
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - dynamodb:GetItem
                - dynamodb:PutItem
                - dynamodb:Scan
              Resource: arn:aws:dynamodb:*:*:table/CMISRepositories
        Roles:
          - Ref: IamRoleLambdaExecution
    TypesDynamoDbTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: CMISTypes
        AttributeDefinitions:
          - AttributeName: typeId
            AttributeType: S
        KeySchema:
          - AttributeName: typeId
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5
    TypesDynamoDBIamPolicy:
      Type: AWS::IAM::Policy
      DependsOn: TypesDynamoDbTable
      Properties:
        PolicyName: lambda-dynamodb-types
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - dynamodb:GetItem
                - dynamodb:PutItem
              Resource: arn:aws:dynamodb:*:*:table/CMISTypes
        Roles:
          - Ref: IamRoleLambdaExecution
    ObjectsDynamoDbTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: CMISObjects
        AttributeDefinitions:
          - AttributeName: cmis:objectId
            AttributeType: S
          - AttributeName: cmis:parentId
            AttributeType: S
          - AttributeName: cmis:name
            AttributeType: S
        KeySchema:
          - AttributeName: cmis:objectId
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5
        GlobalSecondaryIndexes:
          - IndexName: ParentIdIndex
            KeySchema:
              - AttributeName: cmis:parentId
                KeyType: HASH
              - AttributeName: cmis:name
                KeyType: RANGE
            ProvisionedThroughput:
              ReadCapacityUnits: 5
              WriteCapacityUnits: 5
            Projection:
              ProjectionType: ALL
    ObjectsDynamoDBIamPolicy:
      Type: AWS::IAM::Policy
      DependsOn: ObjectsDynamoDbTable
      Properties:
        PolicyName: lambda-dynamodb-objects
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - dynamodb:GetItem
                - dynamodb:PutItem
                - dynamodb:Query
              Resource: arn:aws:dynamodb:*:*:table/CMISObjects
        Roles:
          - Ref: IamRoleLambdaExecution
    ParentIndexDynamoDBIamPolicy:
      Type: AWS::IAM::Policy
      DependsOn: ObjectsDynamoDbTable
      Properties:
        PolicyName: lambda-dynamodb-parent-index
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - dynamodb:Query
              Resource: arn:aws:dynamodb:*:*:table/CMISObjects/index/ParentIdIndex
        Roles:
          - Ref: IamRoleLambdaExecution
    ContentBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: cmis-content-us-east-1
    ContentBucketIamPolicy:
      Type: AWS::IAM::Policy
      DependsOn: ContentBucket
      Properties:
        PolicyName: lambda-bucket-content
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - s3:ListBucket
              Resource: arn:aws:s3:::cmis-content-us-east-1
            - Effect: Allow
              Action:
                - s3:PutObject
                - s3:GetObject
                - s3:DeleteObject
              Resource: arn:aws:s3:::cmis-content-us-east-1/*
        Roles:
          - Ref: IamRoleLambdaExecution
